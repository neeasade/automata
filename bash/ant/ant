#!/usr/bin/env bash
#
# ant - langton's ant

usage() {
    while IFS= read -r line; do
        printf '%s\n' "$line"
    done << EOF
usage : ${0##*/} [-whi <number>]

options :
    -w <number>    set width  to <number> (default : 15)
    -h <number>    set height to <number> (default : 15)
    -i <number>    iterate <number> times (default : 500)
EOF
} >&2

convert_to_number() {
    declare -n var=$1

    { printf -v var '%d' "$2" &> /dev/null || ((var < 0)); } || {
        echo "error : '$2' isn't a valid positive integer" >&2
        exit 1
    }
}

ant() {
    declare -A uni

    ((
        ant_x = height / 2,
        ant_y =  width / 2,
        dir = 0
    ))

    for ((n = 0; n < iter; ++n)) {
        printf 'P1\n%s %s\n' "$width" "$height"

        for ((i = 0; i < height; ++i)) {
            for ((j = 0; j < width; ++j)) {
                printf '%s' $((uni[$i $j]))
            }
        }

        ((dir = (dir + ((uni[$ant_x $ant_y] ^= 1) == 0 ? 1 : -1) + 4) % 4))

        case $dir in
            0) ((ant_x = (--ant_x + height) % height));;
            1) ((ant_y = (--ant_y +  width) %  width));;
            2) ((ant_x = (++ant_x + height) % height));;
            3) ((ant_y = (++ant_y +  width) %  width));;
        esac
    }
}

((
    width  = 15,
    height = 15,
    iter   = 500
))

while (($#)); do
    getopts ":w:h:i:" arg

    case $arg in
        w)
            convert_to_number width  "$2"
            shift
            ;;
        h)
            convert_to_number height "$2"
            shift
            ;;
        i)
            convert_to_number iter   "$2"
            shift
            ;;
        *) usage
    esac

    shift
done

ant
