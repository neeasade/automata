#!/usr/bin/env bash
#
# wireworld - wireworld implementation

die() {
    echo "$1" >&2
    exit 1
}

usage="usage : ${0##*/} [file] [iter]"

((N = $2)) &> /dev/null

[[ $N ]]  || die "$usage"
((N < 0)) && die "error : '$N' isn't a valid positive integer"

{ mapfile -t input < "$1"; } 2> /dev/null || die "$usage"

COLORS=(
    '016 032 041'
    '113 170 197'
    '201 100 126'
    '237 238 240'
)

declare -A uni

((
    X = ${#input[@]},
    Y = ${#input[0]}
))

((t = 0))

for ((i = 0; i < X; ++i)) {
    for ((j = 0; j < Y; ++j)) {
        ((uni[$i $j $t] = ${input[i]:j:1}))
    }
}

for ((n = 0; n < N; ++n)) {
    out="P3\n$Y $X\n255\n"

    for ((i = 0; i < X; ++i)) {
        for ((j = 0; j < Y; ++j)) {
            out+="${COLORS[uni[$i $j $t]]}\n"

            case $((uni[$i $j $t])) in
                0) ((tmp = 0));;
                1) ((tmp = 2));;
                2) ((tmp = 3));;
                3)
                    ((cnt = 0))

                    for u in -1 0 1; {
                        for v in -1 0 1; {
                            ((u != 0 || v != 0)) && {
                                ((
                                    x = (i + u + X) % X,
                                    y = (j + v + Y) % Y
                                ))

                                ((uni[$x $y $t] == 1 && ++cnt))
                            }
                        }
                }

                ((tmp = (cnt == 1 || cnt == 2) ? 1 : 3))
            esac

            ((uni[$i $j $((!t))] = tmp))
        }
    }

    ((t ^= 1))

    printf '%b\n' "$out"
}
