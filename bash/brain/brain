#!/usr/bin/env bash
#
# brain - brian's brain

COLORS=(
    '016 032 041'
    '113 170 197'
    '201 100 126'
)

usage() {
    while IFS= read -r line; do
        printf '%s\n' "$line"
    done << EOF
usage : ${0##*/} [-whi <number>]

options :
    -w <number>    set width  to <number> (default : 15)
    -h <number>    set height to <number> (default : 15)
    -i <number>    iterate <number> times (default : 500)
EOF
} >&2

convert_to_number() {
    declare -n var=$1

    { printf -v var '%d' "$2" &> /dev/null || ((var < 0)); } || {
        echo "error : '$2' isn't a valid positive integer" >&2
        exit 1
    }
}

brain() {
    declare -A uni

    ((flag = 0))

    for ((i = 0; i < height * width / 4; ++i)) {
        ((uni[$((RANDOM % height)) $((RANDOM % width)) $flag] = RANDOM % 2 + 1))
    }

    for ((n = 0; n < iter; ++n)) {
        printf 'P3\n%s %s\n255\n' "$width" "$height"

        for ((i = 0; i < height; ++i)) {
            for ((j = 0; j < width; ++j)) {
                ((tmp = uni[$i $j $flag]))

                printf '%s\n' "${COLORS[tmp]}"

                ((tmp == 0)) && {
                    ((cnt = 0))

                    for ((k = -1; k <= 1; ++k)) {
                        for ((l = -1; l <= 1; ++l)) {
                            ((k != 0 || l != 0)) && {
                                ((
                                    x = (i + k + height) % height,
                                    y = (j + l +  width) %  width
                                ))

                                ((uni[$x $y $flag] == 2)) &&
                                    ((++cnt))
                            }
                        }
                    }
                    ((tmp = cnt == 2 ? 2 : 0))

                    :
                } ||
                    ((--tmp))

                ((uni[$i $j $((!flag))] = tmp))
            }
        }

        ((flag ^= 1))
    }
}

((
    width  = 15,
    height = 15,
    iter   = 500
))

while (($#)); do
    getopts ":w:h:i:" arg

    case $arg in
        w)
            convert_to_number width  "$2"
            shift
            ;;
        h)
            convert_to_number height "$2"
            shift
            ;;
        i)
            convert_to_number iter   "$2"
            shift
            ;;
        *) usage
    esac

    shift
done

brain
