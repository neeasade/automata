(import (chicken bitwise)
        (chicken format)
        (chicken random))

(define (gol X Y I N)
  "init vector"
  (let ((uni (make-vector X)))
    (do ((x 0 (add1 x))) ((= x X))
      (vector-set! uni x (make-vector Y))
      (do ((y 0 (add1 y))) ((= y Y))
        (vector-set! (vector-ref uni x) y (make-vector 2 #t))))
    (do ((i 0 (let ((x (pseudo-random-integer X))
                    (y (pseudo-random-integer Y)))
                (if (vector-ref (vector-ref (vector-ref uni x) y) 0)
                    (begin
                      (vector-set! (vector-ref (vector-ref uni x) y) 0 #f)
                      (add1 i))
                    i))))
      ((= i I)))
    "run the game of life"
    (set! flag 0)
    (do ((n 0 (add1 n))) ((= n N))
      (printf "P1\n~a ~a\n" Y X)
      (set! neg (bitwise-xor flag 1))
      (do ((x 0 (add1 x))) ((= x X))
        (do ((y 0 (add1 y))) ((= y Y))
          (printf "~a" (if (vector-ref (vector-ref (vector-ref uni x) y) flag)
                           0
                           1))
          "count neighbors"
          (set! cnt 0)
          (do ((u -1 (add1 u))) ((> u 1))
            (do ((v -1 (add1 v))) ((> v 1))
              (unless (and (zero? u)
                           (zero? v))
                (unless (vector-ref (vector-ref (vector-ref uni (remainder (+ x u X) X))
                                                                (remainder (+ y v Y) Y))
                                                                flag)
                  (set! cnt (add1 cnt))))))
          (case cnt
            ((2)  (set! tmp (vector-ref (vector-ref (vector-ref uni x) y) flag)))
            ((3)  (set! tmp #f))
            (else (set! tmp #t)))
          (vector-set! (vector-ref (vector-ref uni x) y) neg tmp)))
      (set! flag neg))))

(gol 150 150 5625 500)
